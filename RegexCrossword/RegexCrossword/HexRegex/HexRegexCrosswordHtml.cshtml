@* Generator : Template TypeVisibility : Internal *@
@using System
@using HexRegex
@functions  {
    public HexRegexCrossword Model { get; set; }
}
<html>
    <head>
        <style type="text/css">
            
            body {
                overflow-x: hidden;
            }
            
            .hexagon {
                border-color: blue;
                border-style: solid;
                border-width: 1px;
                display: inline-block;
                padding: 0;
                width: 2em;
                margin-left: -1em;
                height: 2em;
                margin-top: -1em;
                text-align: center;
                position: absolute;
            }
        </style>
        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"></script>
        <script type="text/javascript">
            // use axial coords http://www.redblobgames.com/grids/hexagons/
            @{ var firstX = true; }
            var hexData = {
            @for (int x = -6; x <= 6; x++)
            {
                <text>@(firstX ? "" : ",") "@x":{</text>
                firstX = false;
                var firstZ = true;
                for (int y = -6; y <= 6; y++)
                {
                    var z = 0 - x - y;
                    if (Math.Abs(z) <= 6)
                    {
                        <text>@(firstZ ? "" : ",") "@z" : "@x,@z"</text>
                        firstZ = false;
                    }
                }
                <text>}</text>
            }
            };
            var SQRT_3 = Math.sqrt(3);
            var SIZE = 25;
            var CENTRE_X = SIZE * 15;
            var CENTRE_Y = CENTRE_X;

            var hexCornerOffsets = [];
            for (var i = 0; i <= 6; i++) {
                var angle = 2 * Math.PI / 6 * (i + 0.5);
                var x_i = SIZE * Math.cos(angle);
                var y_i = SIZE * Math.sin(angle);
                hexCornerOffsets[i] = { 'x': x_i, 'y': y_i };
            }

            $(function () {
                var container = $('#container');
                var canvas = document.getElementById("canvas").getContext('2d');
                $.each(hexData, function (q, rs) {
                    q = q - 0;
                    $.each(rs, function (r, val) {
                        r = r - 0;
                        var x = CENTRE_X + (SIZE * SQRT_3 * (q + r / 2.0));
                        var y = CENTRE_Y + (SIZE * 3.0 / 2.0 * r);

                        var div = $("<div />")
                            .addClass('hexagon')
                            .text(val)
                            .offset({ top: y, left: x });
                        container.append(div);
                        hexData[q][r] = div;

                        canvas.beginPath();
                        canvas.moveTo(x + hexCornerOffsets[0].x, y + hexCornerOffsets[0].y);
                        for (var i = 1; i <= 6; i++) {
                            canvas.lineTo(x + hexCornerOffsets[i].x, y + hexCornerOffsets[i].y);
                        }
                        canvas.stroke();
                    });
                });
            });
        </script>
    </head>
    <body>
        <div id="container">
            <canvas id="canvas" width="1000" height="1000"></canvas>
            <div id="elts"></div>
        </div>
    </body>
</html>
