@* Generator : Template TypeVisibility : Internal *@
@using System
@using HexRegex
@functions  {
    public HexRegexCrossword Model { get; set; }
}
<html>
    <head>
        <style type="text/css">
            
            body {
                overflow-x: hidden;
            }

            #container {
                position: relative;
            }

            .hexagon, .clue {
                display: block;
                padding: 0;
                height: 2em;
                line-height: 2em;
                position: absolute;
            }
            
            .hexagon {
                width: 2em;
                text-align: center;
            }

            .clue {
                text-align: right;
                width: 20em;
                padding-right: 20em;
            }

            .clue.x {
                transform: rotate(240deg);
            }

            .clue.y {
                transform: rotate(120deg);
            }
        </style>
        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.1/jquery.min.js"></script>
        <script type="text/javascript" src="file:///E:/Work/DavidLloydABS/reception/public/js/jquery/jquery-1.6.2.min.js"></script>
        <script type="text/javascript">
            // use axial coords http://www.redblobgames.com/grids/hexagons/
            // hexes involved are those for which x,y,z all in [-6,6]
            // always have x + y + z

            @{ var firstX = true; }
            var hexDataByQR = {
            @for (int x = -6; x <= 6; x++)
            {
                <text>@(firstX ? "" : ",") "@x":{</text>
                firstX = false;
                var firstZ = true;
                for (int y = -6; y <= 6; y++)
                {
                    var z = 0 - x - y;
                    if (Math.Abs(z) <= 6)
                    {
                        <text>@(firstZ ? "" : ",") "@z" : "@x,@z"</text>
                        firstZ = false;
                    }
                }
                <text>}</text>
            }
            };
            var cluesByAxisIdx = {
                @for (var axis = 'X'; axis <= 'Z'; axis++) {
                    <text>@(axis == 'X' ? "" : ",")"@axis":{</text>
                    @for (var idx = -6; idx <= 6; idx++) {
                         <text>@(idx == -6 ? "" : ",")"@idx":"@Model.Clues[axis - 'X',idx + 6]"</text>
                    }
                    <text>}</text>
                }
            }

            var SQRT_3 = Math.sqrt(3);
            var SIZE = 25;
            var CENTRE_X = SIZE * 18;
            var CENTRE_Y = CENTRE_X;

            var hexCornerOffsets = [];
            for (var i = 0; i <= 6; i++) {
                var angle = 2 * Math.PI / 6 * (i + 0.5);
                var x_i = SIZE * Math.cos(angle);
                var y_i = SIZE * Math.sin(angle);
                hexCornerOffsets[i] = { 'x': x_i, 'y': y_i };
            }

            function hexQRtoPixelXY(q, r) {
                var x = CENTRE_X + (SIZE * SQRT_3 * (q + r / 2.0));
                var y = CENTRE_Y + (SIZE * 3.0 / 2.0 * r);
                return { "x": x, "y": y };
            }

            $(function () {
                var container = $('#container');
                var canvas = document.getElementById("canvas").getContext('2d');
                $.each(hexDataByQR, function (q, rs) {
                    q = q - 0;
                    $.each(rs, function (r, val) {
                        r = r - 0;
                        var xy = hexQRtoPixelXY(q, r);

                        var div = $("<div />")
                            .addClass('hexagon')
                            .text(val);
                        container.append(div);
                        div.css({ top: xy.y - div.height() / 2, left: xy.x - div.width() / 2 });
                        hexDataByQR[q][r] = div;

                        canvas.beginPath();
                        canvas.moveTo(xy.x + hexCornerOffsets[0].x, xy.y + hexCornerOffsets[0].y);
                        for (var i = 1; i <= 6; i++) {
                            canvas.lineTo(xy.x + hexCornerOffsets[i].x, xy.y + hexCornerOffsets[i].y);
                            if (q == 0 && r == 0) {
                                console.log({ 'x': xy.x + hexCornerOffsets[i].x, 'y': xy.y + hexCornerOffsets[i].y });
                            }
                        }
                        canvas.stroke();
                    });
                });
                $.each(cluesByAxisIdx, function (axis, cluesByIdx) {
                    $.each(cluesByIdx, function (idx, clue) {
                        idx = idx - 0;
                        var div = $("<div />")
                            .addClass("clue")
                            .addClass(axis)
                            .text(clue);
                        container.append(div);

                        // if axis == x
                        // x,y,z here are hex cube coords
                        var x = idx;
                        var y = Math.max(-6, - 6 - x) - 0.7;  // min y for x == idx, dec 0.7 to move out of grid
                        var z = - x - y; // fixed

                        if (axis == 'Y') {
                            var tmp = y;
                            y = x;
                            x = z;
                            z = tmp;
                        } else if (axis == 'Z') {
                            var tmp = z;
                            z = x;
                            x = y;
                            y = tmp;
                        }

                        // xy is pixel coords
                        var xy = hexQRtoPixelXY(x, z);

                        div.css({ top: xy.y - div.height() / 2, left: xy.x - div.width() });
                        cluesByAxisIdx[axis][idx] = div;
                    });
                });
            });
        </script>
    </head>
    <body>
        <div id="container">
            <canvas id="canvas" width="1000" height="1000"></canvas>
            <div id="elts"></div>
        </div>
    </body>
</html>
